define(function(e,g,b){var h=e("../lib/oop");var f=e("./text").Mode;var i=e("../tokenizer").Tokenizer;var a=e("./ocaml_highlight_rules").OcamlHighlightRules;var k=e("./matching_brace_outdent").MatchingBraceOutdent;var d=e("../range").Range;var j=function(){this.HighlightRules=a;this.$outdent=new k()};h.inherits(j,f);var c=/(?:[({[=:]|[-=]>|\b(?:else|try|with))\s*$/;(function(){this.toggleCommentLines=function(l,q,r,m){var n,t;var p=true;var s=/^\s*\(\*(.*)\*\)/;for(n=r;n<=m;n++){if(!s.test(q.getLine(n))){p=false;break}}var o=new d(0,0,0,0);for(n=r;n<=m;n++){t=q.getLine(n);o.start.row=n;o.end.row=n;o.end.column=t.length;q.replace(o,p?t.match(s)[1]:"(*"+t+"*)")}};this.getNextLineIndent=function(o,m,n){var l=this.$getIndent(m);var p=this.getTokenizer().getLineTokens(m,o).tokens;if(!(p.length&&p[p.length-1].type==="comment")&&o==="start"&&c.test(m)){l+=n}return l};this.checkOutdent=function(n,l,m){return this.$outdent.checkOutdent(l,m)};this.autoOutdent=function(l,m,n){this.$outdent.autoOutdent(m,n)};this.$id="ace/mode/ocaml"}).call(j.prototype);g.Mode=j});