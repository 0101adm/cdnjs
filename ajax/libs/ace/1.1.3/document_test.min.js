if(typeof process!=="undefined"){require("amd-loader");require("./test/mockdom")}define(function(d,c,e){var b=d("./document").Document;var f=d("./range").Range;var a=d("./test/assertions");e.exports={"test: insert text in line":function(){var h=new b(["12","34"]);var g=[];h.on("change",function(j){g.push(j.data)});h.insert({row:0,column:1},"juhu");a.equal(h.getValue(),["1juhu2","34"].join("\n"));var i=g.concat();h.revertDeltas(i);a.equal(h.getValue(),["12","34"].join("\n"));h.applyDeltas(i);a.equal(h.getValue(),["1juhu2","34"].join("\n"))},"test: insert new line":function(){var h=new b(["12","34"]);var g=[];h.on("change",function(j){g.push(j.data)});h.insertNewLine({row:0,column:1});a.equal(h.getValue(),["1","2","34"].join("\n"));var i=g.concat();h.revertDeltas(i);a.equal(h.getValue(),["12","34"].join("\n"));h.applyDeltas(i);a.equal(h.getValue(),["1","2","34"].join("\n"))},"test: insert lines at the beginning":function(){var h=new b(["12","34"]);var g=[];h.on("change",function(j){g.push(j.data)});h.insertLines(0,["aa","bb"]);a.equal(h.getValue(),["aa","bb","12","34"].join("\n"));var i=g.concat();h.revertDeltas(i);a.equal(h.getValue(),["12","34"].join("\n"));h.applyDeltas(i);a.equal(h.getValue(),["aa","bb","12","34"].join("\n"))},"test: insert lines at the end":function(){var h=new b(["12","34"]);var g=[];h.on("change",function(i){g.push(i.data)});h.insertLines(2,["aa","bb"]);a.equal(h.getValue(),["12","34","aa","bb"].join("\n"))},"test: insert lines in the middle":function(){var h=new b(["12","34"]);var g=[];h.on("change",function(j){g.push(j.data)});h.insertLines(1,["aa","bb"]);a.equal(h.getValue(),["12","aa","bb","34"].join("\n"));var i=g.concat();h.revertDeltas(i);a.equal(h.getValue(),["12","34"].join("\n"));h.applyDeltas(i);a.equal(h.getValue(),["12","aa","bb","34"].join("\n"))},"test: insert multi line string at the start":function(){var h=new b(["12","34"]);var g=[];h.on("change",function(j){g.push(j.data)});h.insert({row:0,column:0},"aa\nbb\ncc");a.equal(h.getValue(),["aa","bb","cc12","34"].join("\n"));var i=g.concat();h.revertDeltas(i);a.equal(h.getValue(),["12","34"].join("\n"));h.applyDeltas(i);a.equal(h.getValue(),["aa","bb","cc12","34"].join("\n"))},"test: insert multi line string at the end":function(){var h=new b(["12","34"]);var g=[];h.on("change",function(j){g.push(j.data)});h.insert({row:2,column:0},"aa\nbb\ncc");a.equal(h.getValue(),["12","34aa","bb","cc"].join("\n"));var i=g.concat();h.revertDeltas(i);a.equal(h.getValue(),["12","34"].join("\n"));h.applyDeltas(i);a.equal(h.getValue(),["12","34aa","bb","cc"].join("\n"))},"test: insert multi line string in the middle":function(){var h=new b(["12","34"]);var g=[];h.on("change",function(j){g.push(j.data)});h.insert({row:0,column:1},"aa\nbb\ncc");a.equal(h.getValue(),["1aa","bb","cc2","34"].join("\n"));var i=g.concat();h.revertDeltas(i);a.equal(h.getValue(),["12","34"].join("\n"));h.applyDeltas(i);a.equal(h.getValue(),["1aa","bb","cc2","34"].join("\n"))},"test: delete in line":function(){var h=new b(["1234","5678"]);var g=[];h.on("change",function(j){g.push(j.data)});h.remove(new f(0,1,0,3));a.equal(h.getValue(),["14","5678"].join("\n"));var i=g.concat();h.revertDeltas(i);a.equal(h.getValue(),["1234","5678"].join("\n"));h.applyDeltas(i);a.equal(h.getValue(),["14","5678"].join("\n"))},"test: delete new line":function(){var h=new b(["1234","5678"]);var g=[];h.on("change",function(j){g.push(j.data)});h.remove(new f(0,4,1,0));a.equal(h.getValue(),["12345678"].join("\n"));var i=g.concat();h.revertDeltas(i);a.equal(h.getValue(),["1234","5678"].join("\n"));h.applyDeltas(i);a.equal(h.getValue(),["12345678"].join("\n"))},"test: delete multi line range line":function(){var h=new b(["1234","5678","abcd"]);var g=[];h.on("change",function(j){g.push(j.data)});h.remove(new f(0,2,2,2));a.equal(h.getValue(),["12cd"].join("\n"));var i=g.concat();h.revertDeltas(i);a.equal(h.getValue(),["1234","5678","abcd"].join("\n"));h.applyDeltas(i);a.equal(h.getValue(),["12cd"].join("\n"))},"test: delete full lines":function(){var h=new b(["1234","5678","abcd"]);var g=[];h.on("change",function(i){g.push(i.data)});h.remove(new f(1,0,3,0));a.equal(h.getValue(),["1234",""].join("\n"))},"test: remove lines should return the removed lines":function(){var h=new b(["1234","5678","abcd"]);var g=h.removeLines(1,2);a.equal(g.join("\n"),["5678","abcd"].join("\n"))},"test: should handle unix style new lines":function(){var g=new b(["1","2","3"]);a.equal(g.getValue(),["1","2","3"].join("\n"))},"test: should handle windows style new lines":function(){var g=new b(["1","2","3"].join("\r\n"));g.setNewLineMode("unix");a.equal(g.getValue(),["1","2","3"].join("\n"))},"test: set new line mode to 'windows' should use '\\r\\n' as new lines":function(){var g=new b(["1","2","3"].join("\n"));g.setNewLineMode("windows");a.equal(g.getValue(),["1","2","3"].join("\r\n"))},"test: set new line mode to 'unix' should use '\\n' as new lines":function(){var g=new b(["1","2","3"].join("\r\n"));g.setNewLineMode("unix");a.equal(g.getValue(),["1","2","3"].join("\n"))},"test: set new line mode to 'auto' should detect the incoming nl type":function(){var g=new b(["1","2","3"].join("\n"));g.setNewLineMode("auto");a.equal(g.getValue(),["1","2","3"].join("\n"));var g=new b(["1","2","3"].join("\r\n"));g.setNewLineMode("auto");a.equal(g.getValue(),["1","2","3"].join("\r\n"));g.replace(new f(0,0,2,1),["4","5","6"].join("\n"));a.equal(["4","5","6"].join("\n"),g.getValue())},"test: set value":function(){var g=new b("1");a.equal("1",g.getValue());g.setValue(g.getValue());a.equal("1",g.getValue());var g=new b("1\n2");a.equal("1\n2",g.getValue());g.setValue(g.getValue());a.equal("1\n2",g.getValue())},"test: empty document has to contain one line":function(){var g=new b("");a.equal(g.$lines.length,1)}}});if(typeof module!=="undefined"&&module===require.main){require("asyncjs").test.testcase(module.exports).exec()};