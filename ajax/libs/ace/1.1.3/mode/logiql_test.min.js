if(typeof process!=="undefined"){require("amd-loader")}define(function(d,b,f){var e=d("../edit_session").EditSession;var c=d("../tokenizer").Tokenizer;var g=d("./logiql").Mode;var a=d("../test/assertions");f.exports={setUp:function(){this.mode=new g()},"test: toggle comment lines should prepend '//' to each line":function(){var h=new e(["    abc","cde","fg"]);this.mode.toggleCommentLines("start",h,0,1);a.equal(["//     abc","// cde","fg"].join("\n"),h.toString())},"test: auto indent after ->":function(){a.equal("  ",this.mode.getNextLineIndent("start","parent(a, b) ->","  "))},"test: auto indent after <--":function(){a.equal("  ",this.mode.getNextLineIndent("start","foo <--    ","  "))},"test: no auto indent in multi line comment":function(){a.equal("",this.mode.getNextLineIndent("start","/* -->","  "));a.equal("  ",this.mode.getNextLineIndent("start","  /* ->","    "));a.equal("  ",this.mode.getNextLineIndent("comment.block","  abcd","  "))},"test: no auto indent after -> in single line comment":function(){a.equal("",this.mode.getNextLineIndent("start","//->","  "));a.equal("  ",this.mode.getNextLineIndent("start","  //->","  "))},"test: trigger outdent if line ends with .":function(){a.ok(this.mode.checkOutdent("start","   ","\n"));a.ok(this.mode.checkOutdent("start"," a  ","\r\n"));a.ok(!this.mode.checkOutdent("start","","}"));a.ok(!this.mode.checkOutdent("start","   ","a }"));a.ok(!this.mode.checkOutdent("start","   }","}"))},"test: auto outdent should indent the line with the same indent as the line with the matching ->":function(){var h=new e(["  bar (a, b) ->","  foo(a)[1.2]","    bla.","    "],new g());this.mode.autoOutdent("start",h,2);a.equal("  ",h.getLine(3))},"test: no auto outdent if no matching brace is found":function(){var h=new e(["  bar (a, b) ->","  foo(a)[1.2].","    bla.","    "],new g());this.mode.autoOutdent("start",h,2);a.equal("    ",h.getLine(3))}}});if(typeof module!=="undefined"&&module===require.main){require("asyncjs").test.testcase(module.exports).exec()};