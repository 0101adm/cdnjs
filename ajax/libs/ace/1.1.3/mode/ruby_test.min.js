if(typeof process!=="undefined"){require("amd-loader")}define(function(d,b,f){var e=d("../edit_session").EditSession;var c=d("../tokenizer").Tokenizer;var g=d("./ruby").Mode;var a=d("../test/assertions");f.exports={setUp:function(){this.mode=new g()},"test getNextLineIndent":function(){a.equal(this.mode.getNextLineIndent("start","class Foo","  "),"  ");a.equal(this.mode.getNextLineIndent("start","  def thing(wut)","  "),"    ");a.equal(this.mode.getNextLineIndent("start","  fork do","  "),"    ");a.equal(this.mode.getNextLineIndent("start","  fork do |wut| ","  "),"    ");a.equal(this.mode.getNextLineIndent("start","  something = :ruby","  "),"  ");a.equal(this.mode.getNextLineIndent("start","  if something == 3","  "),"    ");a.equal(this.mode.getNextLineIndent("start","  else","  "),"    ")},"test: checkOutdent":function(){a.ok(this.mode.checkOutdent("start","        en","d"));a.ok(this.mode.checkOutdent("start","        els","e"));a.ok(this.mode.checkOutdent("start","        ","}"));a.equal(this.mode.checkOutdent("start","  end","\n"),false);a.equal(this.mode.checkOutdent("start","foo = ba","r"),false)},"test: auto outdent":function(){var h=new e(["class Phil","  Foo = 'bar'","  end"]);this.mode.autoOutdent("start",h,2);a.equal("  end",h.getLine(2))}}});if(typeof module!=="undefined"&&module===require.main){require("asyncjs").test.testcase(module.exports).exec()};