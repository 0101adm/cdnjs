if(typeof process!=="undefined"){require("amd-loader");require("./test/mockdom")}define(function(e,f,c){var b=e("./edit_session").EditSession;var i=e("./editor").Editor;var d=e("./mode/text").Mode;var k=e("./mode/javascript").Mode;var h=e("./mode/css").Mode;var j=e("./mode/html").Mode;var g=e("./test/mockrenderer").MockRenderer;var a=e("./test/assertions");c.exports={setUp:function(l){this.session1=new b(["abc","def"]);this.session2=new b(["ghi","jkl"]);this.editor=new i(new g());l()},"test: change document":function(){this.editor.setSession(this.session1);a.equal(this.editor.getSession(),this.session1);this.editor.setSession(this.session2);a.equal(this.editor.getSession(),this.session2)},"test: only changes to the new document should have effect":function(){var l=false;this.editor.onDocumentChange=function(){l=true};this.editor.setSession(this.session1);this.editor.setSession(this.session2);this.session1.duplicateLines(0,0);a.notOk(l);this.session2.duplicateLines(0,0);a.ok(l)},"test: should use cursor of new document":function(){this.session1.getSelection().moveCursorTo(0,1);this.session2.getSelection().moveCursorTo(1,0);this.editor.setSession(this.session1);a.position(this.editor.getCursorPosition(),0,1);this.editor.setSession(this.session2);a.position(this.editor.getCursorPosition(),1,0)},"test: only changing the cursor of the new doc should not have an effect":function(){this.editor.onCursorChange=function(){l=true};this.editor.setSession(this.session1);this.editor.setSession(this.session2);a.position(this.editor.getCursorPosition(),0,0);var l=false;this.session1.getSelection().moveCursorTo(0,1);a.position(this.editor.getCursorPosition(),0,0);a.notOk(l);this.session2.getSelection().moveCursorTo(1,1);a.position(this.editor.getCursorPosition(),1,1);a.ok(l)},"test: should use selection of new document":function(){this.session1.getSelection().selectTo(0,1);this.session2.getSelection().selectTo(1,0);this.editor.setSession(this.session1);a.position(this.editor.getSelection().getSelectionLead(),0,1);this.editor.setSession(this.session2);a.position(this.editor.getSelection().getSelectionLead(),1,0)},"test: only changing the selection of the new doc should not have an effect":function(){this.editor.onSelectionChange=function(){l=true};this.editor.setSession(this.session1);this.editor.setSession(this.session2);a.position(this.editor.getSelection().getSelectionLead(),0,0);var l=false;this.session1.getSelection().selectTo(0,1);a.position(this.editor.getSelection().getSelectionLead(),0,0);a.notOk(l);this.session2.getSelection().selectTo(1,1);a.position(this.editor.getSelection().getSelectionLead(),1,1);a.ok(l)},"test: should use mode of new document":function(){this.editor.onChangeMode=function(){l=true};this.editor.setSession(this.session1);this.editor.setSession(this.session2);var l=false;this.session1.setMode(new d());a.notOk(l);this.session2.setMode(new k());a.ok(l)},"test: should use stop worker of old document":function(m){var l=this;l.editor.setSession(l.session1);l.session1.setMode(new h());l.session1.setValue("DIV { color: red; }");l.session1.setValue("");l.session1.setMode(new j());l.session1.insert({row:0,column:0},"<html></html>");setTimeout(function(){a.equal(Object.keys(l.session1.getAnnotations()).length,0);m()},600)}}});if(typeof module!=="undefined"&&module===require.main){require("asyncjs").test.testcase(module.exports).exec()};