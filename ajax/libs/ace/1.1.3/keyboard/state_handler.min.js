define(function(c,b,d){var a=false;function e(f){this.keymapping=this.$buildKeymappingRegex(f)}e.prototype={$buildKeymappingRegex:function(g){for(var f in g){this.$buildBindingsRegex(g[f])}return g},$buildBindingsRegex:function(f){f.forEach(function(g){if(g.key){g.key=new RegExp("^"+g.key+"$")}else{if(Array.isArray(g.regex)){if(!("key" in g)){g.key=new RegExp("^"+g.regex[1]+"$")}g.regex=new RegExp(g.regex.join("")+"$")}else{if(g.regex){g.regex=new RegExp(g.regex+"$")}}}})},$composeBuffer:function(l,k,h,m){if(l.state==null||l.buffer==null){l.state="start";l.buffer=""}var f=[];if(k&1){f.push("ctrl")}if(k&8){f.push("command")}if(k&2){f.push("option")}if(k&4){f.push("shift")}if(h){f.push(h)}var g=f.join("-");var j=l.buffer+g;if(k!=2){l.buffer=j}var i={bufferToUse:j,symbolicName:g};if(m){i.keyIdentifier=m.keyIdentifier}return i},$find:function(k,g,h,j,i,l){var f={};this.keymapping[k.state].some(function(p){var m;if(p.key&&!p.key.test(h)){return false}if(p.regex&&!(m=p.regex.exec(g))){return false}if(p.match&&!p.match(g,j,i,h,l)){return false}if(p.disallowMatches){for(var n=0;n<p.disallowMatches.length;n++){if(!!m[p.disallowMatches[n]]){return false}}}if(p.exec){f.command=p.exec;if(p.params){var o;f.args={};p.params.forEach(function(q){if(q.match!=null&&m!=null){o=m[q.match]||q.defaultValue}else{o=q.defaultValue}if(q.type==="number"){o=parseInt(o)}f.args[q.name]=o})}k.buffer=""}if(p.then){k.state=p.then;k.buffer=""}if(f.command==null){f.command="null"}if(a){console.log("KeyboardStateMapper#find",p)}return true});if(f.command){return f}else{k.buffer="";return false}},handleKeyboard:function(j,h,l,n,k){if(h==-1){h=0}if(h!=0&&(l==""||l==String.fromCharCode(0))){return null}var f=this.$composeBuffer(j,h,l,k);var i=f.bufferToUse;var g=f.symbolicName;var m=f.keyIdentifier;f=this.$find(j,i,g,h,l,m);if(a){console.log("KeyboardStateMapper#match",i,g,f)}return f}};b.matchCharacterOnly=function(f,i,h,g){if(i==0){return true}else{if((i==4)&&h.length==1){return true}else{return false}}};b.StateHandler=e});